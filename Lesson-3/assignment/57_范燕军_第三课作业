pragma solidity ^0.4.18;
import "./SafeMath.sol";  
import "./Ownable.sol";

//以下合约亲测通过  SafeMath.sol   Ownable.sol   没有上传
contract Payroll is Ownable{

    using SafeMath for uint;
    struct Employee{
        address id;
        uint salary;
        uint lastPayday;
    }
    
    uint constant payDuration= 10 seconds;
    mapping(address => Employee) public Employees;
    uint totalSalary;
	
	
	modifier onlyOwner{
	     require(msg.sender==owner);
	     _;
	}
	
	modifier employeeExist(address employeeId){
	    var employee=Employees[employeeId];
	    assert(employee.id!=0x0);
	    _;
	}
	//部分支付
	function _partpaid(Employee employee) private {
	     uint256 mustPaySalary = employee.salary.mul(now.sub(employee.lastPayday)).div(payDuration);
	     employee.id.transfer(mustPaySalary);
	}

	//增加用户
	function addEmplyee(address employeeId,uint salary) onlyOwner{
	    
	     
	     var employee=Employees[employeeId];
	     
	     assert(employee.id==0x0);
	     
	     
	     Employees[employeeId]=Employee(employeeId, salary * 1 ether,now);
	     
	     totalSalary += Employees[employeeId].salary;
	     
	}
	
	//移除用户
	function removeEmployee(address employeeId) onlyOwner  employeeExist(employeeId){
	    
	    var employee=Employees[employeeId];

	    _partpaid(employee);
	    
	    totalSalary -= Employees[employeeId].salary;
	    
	    delete Employees[employeeId];
	}
	
	//修改用户
	function updateEmployee(address employee,uint salary) onlyOwner  employeeExist(employee){
	    
	    var employeeId=Employees[employee];
	    
	     totalSalary -= employeeId.salary;
	     _partpaid(employeeId);
	     totalSalary += salary* 1 ether;
	     
	    Employees[employee].salary=salary* 1 ether;
	    Employees[employee].lastPayday=now;
	}


 
    //给合约增加金额
    function addFund() payable public returns(uint){
        return this.balance;
    }
	
	//可以支付薪水的次数
    function calculateRunway() public returns(uint){
        return this.balance/totalSalary;
    }
    
    function checkEmployee(address employeeId) returns(uint salary,uint lastPayday){
         var employee =Employees[employeeId];
         salary = employee.salary;
         lastPayday = employee.lastPayday;
    }
	
	//是否可以足够支付
    function hasEnoughFund() private returns(bool){
        return calculateRunway()>0;
    }
	
	//到时间就领取薪水
    function getPaid()  employeeExist(msg.sender){
        
        var employee =Employees[msg.sender];
        
        uint nextDay=employee.lastPayday+payDuration;
        assert(nextDay<now);
    
        Employees[msg.sender].lastPayday=nextDay;
        employee.id.transfer(employee.salary);
    }
	
    //-----------------------------------------------------更改用户支付地址-----------------------------------
	//employeeId:原用户
	//newEmployeeId：新用户
    function changePaymentAddress(address employeeId,address newEmployeeId) onlyOwner employeeExist(employeeId){
        
        var employee =Employees[employeeId];
        Employees[newEmployeeId] = Employee(newEmployeeId,employee.salary,employee.lastPayday);
        delete Employees[employeeId];
    }
    
    function getBlance(address employeeId) returns (uint){
        return employeeId.balance;
    }
    

}
