pragma solidity ^0.4.14;

contract Payroll {
    uint constant payDuration = 10 seconds;

    address owner = 0x14723a09acff6d2a60dcdf7aa4aff308fddc160c;
    uint salary = 1 ether;
    address employee;
    uint lastPayday;
    
    
    function addFund() payable returns (uint) {
        require(msg.sender == owner);
        return this.balance;
    }

    function getOwnerinfo() returns (address,uint){
        require(msg.sender == owner);
        return (owner,this.balance);
    }
    
    function getEmployeeinfo() returns (address,uint){
        return (employee,salary);
        
    }
    
    function changeEmployee(address e){
        require(msg.sender == owner);
        require(e != employee);
        advancePay;
        employee = e;
    }
    
    function changeSalary(uint s){
        require(msg.sender == owner);
        require(salary != s);
        advancePay;
        salary = s * 1 ether;
    }
    
    
    function advancePay() {
        require(msg.sender == owner);
        assert(employee != 0x0);
        
        uint payment = salary * (now - lastPayday) / payDuration;
        employee.transfer(payment);
        
        lastPayday = now;
    }    
    
    
    
    function calculateRunway() returns (uint) {
        return this.balance / salary;
    }
    
    function hasEnoughFund() returns (bool) {
        return calculateRunway() > 0;
    }
    
    function getPaid() {
        require(msg.sender == employee);
        
        uint nextPayday = lastPayday + payDuration;
        assert(nextPayday < now);

        lastPayday = nextPayday;
        employee.transfer(salary);
    }
}
